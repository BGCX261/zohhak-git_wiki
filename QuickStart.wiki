#summary Quick start guide
#labels Featured

=Out of the box=
{{{
@RunWith(ZohhakRunner.class)
public class CoercingTest {

    @TestWith({
        "2, 1, 3"
        "3, 5, 8"
    })
    public void adding(int addend1, addend2, result) {
        assertThat(addend1 + addend2).isEqualTo(result);
    }

    @TestWith("c, 10, -13, 15, 1.5, 2.3, 7, true")
    public void coercingWrappers(Character c, Byte b, Short s, Integer i, Float f, Double d, Long l, Boolean bool) {
        // will work also with primitives
	assertThat(c).isEqualTo('c');
	assertThat(b).isEqualTo((byte)10);
	assertThat(s).isEqualTo((short)-13);
	assertThat(i).isEqualTo(15);
	assertThat(f).isEqualTo(1.5f, offset(0.0001f));
        assertThat(d).isEqualTo(2.3, offset(0.0001));
	assertThat(l).isEqualTo(7);
	assertThat(bool).isTrue();
    }

    @TestWith("ONE_OF_ENUM_VALUES")
    public void coerceEnum(SampleEnum param) {
	assertThat(param).isEqualTo(SampleEnum.ONE_OF_ENUM_VALUES);		
    }

    @TestWith("null")
    public void coerceNull(WhateverType whateverType) {
	assertThat(whateverType).isNull();
    }

    @TestWith(" john doe , ' john doe ' ")
    public void coerceString(String trimmed, String untrimmed) {
        assertThat(trimmed).isEqualTo("john doe");
        assertThat(untrimmed).isEqualTo(" john doe ");
    }

    @Test
    public void regularJunitTest() {
        //this will also work
    }
}
}}}
=User types=
{{{
public class CustomCoercer {

    public BigDecimal whateverName(String input) {
        return new BigDecimal(input);
    }

    public Fraction toFraction(String input) {
        ...
        return Fraction.getFraction(...);
    }
}
}}}
{{{
@RunWith(ZohhakRunner.class)
@Configure(coercer=CustomCoercer.class)
public class CoercionTest {

    @TestWith("15, 2/3")
    public void testNumbers(BigDecimal decimal, Fraction fraction) {
        ...
    }

}
}}}