#summary Full user guide
#labels Featured

<wiki:toc max_depth="1" />

= Introduction =

Each zohhak's test method contains string parameters provided within annotation. Each of those strings represents all parameters in a single test method execution.
{{{
@TestWith({
    "clerk,      45'000 USD, GOLD",
    "supervisor, 60'000 GBP, PLATINUM"
})
public void canAcceptDebit(Employee employee, Money money, ClientType clientType) {
    ...
}
}}}
Zohhak:
  # takes each string (e.g. "clerk, 45'000 USD, GOLD")
  # splits it (if necessary) to produce required number of parameters (e.g. "clerk", "45'000 USD", "GOLD")
  # coerces each string to the corresponding method's parameter (e.g. Employee, Money, !ClientType)
  # executes method with produced parameters

Many aspects of splitting and coercing can be configured. Zohhak uses it's default configuration which can be overridden with class and method level configurations.

=Configuration=

Processing of each zohhak's test method depends on configuration. If none is provided, the default one (`DefaultConfiguration.class`) is used. More specific configuration overrides more general one.
Currently user can configure following parameters (for details check `@TestWith` javadoc):
  * parameter separator
  * string boundary
  * additional coercers
  * if coercers provided by more general should be inherited
  * configuration that can hold all above parameters. helps keeping your tests DRY


If any of them is not provided then value from more general configuration is used.


Configuration can be placed on class level:
{{{
@RunWith(ZohhakRunner.class)
@Configure(coercers={Coercer1.class, Coercer2.class}, separator=";")
/* 
 * default configuration for every test in this class:
 * 3 coercers (the default and 2 additional ones) 
 * colon instead of comma
 * default string boundary
 */
public class TestClass {

    @TestWith("...") //
    public void test1(...

}


}}}


=Splitting parameters=
Each invocation line will be split using separator. The default separator is comma and can be changed.